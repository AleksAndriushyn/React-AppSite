{"version":3,"sources":["Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatus.jsx","Components/Profile/ProfileInfo/ProfileInfo.jsx","Components/Profile/MyPosts/AddPostForm.jsx","Components/Profile/MyPosts/Post/Post.jsx","Components/Profile/MyPosts/MyPosts.jsx","Components/Profile/MyPosts/MyPostsContainer.jsx","Components/Profile/Profile.jsx","Components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","name","fullName","Preloader","maxLength10","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","validate","required","component","Textarea","placeholder","Post","item","message","likesCounter","MyPosts","React","memo","PostElements","posts","map","p","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","ProfilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","getProfile","getStatus","Component","compose","Auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.68c71fc2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__ABhAJ\",\"name\":\"ProfileInfo_name__1cF8W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2D17D\",\"posts\":\"MyPosts_posts__h4RnX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__VrTbX\"};","import React, { useEffect, useState } from 'react';\r\n\r\nconst ProfileStatus = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n\t}\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"----\"}</span>\r\n                </div>\r\n            }\r\n            { editMode &&\r\n                <div>\r\n                <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )   \r\n}\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatus from './ProfileStatus';\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large} />\r\n                <div>\r\n                    <ProfileStatus status={status} updateStatus={updateStatus} />\r\n                </div>\r\n                <div className={s.name}>\r\n                    {profile.fullName}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { required, maxLengthCreator } from './../../../Utils/Validators/validators'\r\nimport { Textarea } from '../../common/FormControls/FormControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <div>\r\n                    <Field validate={[required, maxLength10]} component={Textarea} name={\"newPostText\"} placeholder='Type for new post' />\r\n                </div>\r\n                <div>\r\n                    <button>Add Post</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'addPost'\r\n})(AddPostForm);","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRwDsQHhnxB6CE5KsiVJXF28ONLgdEy9t0ZBg&usqp=CAU' />\r\n            {props.message}\r\n            <div>\r\n                <span>likes: </span>{props.likesCounter}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport AddPostForm from './AddPostForm';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\nconst MyPosts = React.memo(props => {\r\n\r\n    let PostElements = props.posts.map(p => <Post message={p.message} likesCounter={p.likesCounter} />);\r\n\r\n    let addPostText = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Posts</h3>\r\n            <AddPostForm onSubmit={addPostText} />\r\n            <div className={s.posts}>\r\n                {PostElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { addPostActionCreator } from '../../../Redux/ProfileReducer';\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.ProfilePage.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { getProfile, getStatus, updateStatus} from '../../Redux/ProfileReducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n    \r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n        }\r\n\r\n        this.props.getProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus} />\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return ({\r\n        profile: state.ProfilePage.profile,\r\n        status: state.ProfilePage.status,\r\n        authorizedUserId: state.Auth.userId,\r\n        isAuth: state.Auth.isAuth\r\n    })\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getProfile, getStatus, updateStatus }),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}